import os
import sys
import json
import time
from finnhub.exceptions import FinnhubAPIException

# --- Add the project root ("/app") to sys.path so we can import app modules ---
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.finnhub_client import get_profile
from scripts.fetch_sp500_symbols import fetch_sp500_symbols  # not relative since it's a script

# --- 1) Get list of symbols (S&P 500)
SYMBOLS = fetch_sp500_symbols()

# --- 2) Mapping from Finnhub keys to your model attributes ---
FIELD_MAP = {
    'ticker':               'symbol',
    'name':                 'name',
    'exchange':             'exchange',
    'finnhubIndustry':      'industry',
    'currency':             'currency',
    'country':              'country',
    'estimateCurrency':     'estimate_currency',
    'ipo':                  'ipo',
    'logo':                 'logo',
    'marketCapitalization': 'market_capitalization',
    'phone':                'phone',
    'shareOutstanding':     'shares_outstanding',
    'weburl':               'weburl',
}

def export_profiles_json(symbols, output_path):
    results = []
    processed = 0
    total = len(symbols)

    for idx, symbol in enumerate(symbols, 1):
        print(f"[{idx}/{total}] Fetching {symbol}...")
        # —— retry loop for rate-limit errors ——
        while True:
            try:
                data = get_profile(symbol)
                break
            except FinnhubAPIException as e:
                if getattr(e, "status_code", None) == 429:
                    print(f"⚠️  Rate limit reached. Sleeping for 60s before retrying {symbol}…")
                    time.sleep(60)
                else:
                    print(f"⚠️  API error for {symbol}: {e}")
                    data = None
                    break

        if not data:
            print(f"⚠️  no data for {symbol}")
            continue

        stock_dict = { model_attr: data.get(api_key)
                       for api_key, model_attr in FIELD_MAP.items() }
        results.append(stock_dict)
        processed += 1

        print(f"✅ {symbol} processed ({processed}/{total})")

        # —— throttle to ≤60 calls/minute ——  
        time.sleep(1)

    # Write to JSON file
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
        print("profiles success")

    print(f"\n🎉 Done. Exported {processed}/{total} symbols to {output_path}")

if __name__ == '__main__':
    symbols = SYMBOLS
    if len(sys.argv) > 1:
        symbols = sys.argv[1:]
    output_path = "data/profiles.json"
    export_profiles_json(symbols, output_path)